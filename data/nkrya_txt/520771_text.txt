 П. Н. Бибило.
 Предлагаются подходы к перепроектированию программируемых логических схем типа FPGA в полузаказные СБИС на основе базовых матричных кристаллов.
 Исходное описание проектов представляется на языке высокого уровня VHDL.
 Программируемые пользователями вентильные матрицы FPGA ( Field - Programmable Gate Arrays) являются широко распространённой элементной базой реализации цифровых систем, особенно при небольших сериях выпуска цифровой аппаратуры.
 Зачастую реализация схемы на FPGA предшествует созданию заказной либо полузаказной СБИС ( сверхбольшой интегральной схемы).
 Заметим, что FPGA также представляют собой СБИС, однако относятся к классу ПЛИС ( программируемых логических интегральных схем)[ 1 ].
 При достаточно больших сериях либо в специальных применениях, когда требуются отечественные, а не зарубежные электронные компоненты, возникает проблема быстрого перепроектирования схем, реализованных на FPGA, в схемы полузаказных СБИС на основе БМК ( базовых матричных кристаллов).
 В статье предлагаются некоторые подходы к решению данной проблемы на уровне алгоритмического и логического проектирования.
 Весьма желательно, чтобы читатель был знаком с основами языка VHDL ( Very high speed integrated circuits Hardware Description Language)[ 2 ].
 Конкретизируем рассматриваемую проблему.
 В качестве FPGA будем рассматривать кристаллы, выпускаемые фирмой Xilinx.
 В качестве системы автоматизированного проектирования ( САПР) FPGA будем рассматривать интегрированную среду проектирования WebPack ISE 5. 1, предназначенную для сквозного проектирования кристаллов FPGA.
 В качестве полузаказных СБИС на основе БМК возьмём серию К 1574, производимую на НПО " Интеграл ".
 Число внешних выводов микросхем серии К 1574 - до 168; число логических вентилей - до 75 тыс. Кристаллы изготовляются по КМОП-технологии и могут работать на частоте до 50 МГц [ 3 ].
 Результатом алгоритмического и логического проектирования СБИС на основе БМК является логическая схема, представленная в базисе логических элементов библиотеки проектирования БМК.
 Постановка задачи.
 Требуется перепроектировать схему, реализованную на FPGA фирмы Xilinx с помощью САПР WebPack ISE 5. 1, в схему в библиотеке проектирования БМК серии К 1574.
 Реализация схем на FPGA.
 Среда проектирования WebPack ISE 5. 1 представляет собой программные средства для сквозного проектирования - от описания поведения на языке высокого уровня до файла конфигурации.
 Файл конфигурации - это файл настройки FPGA, который загружается в микросхему FPGA.
 В качестве языков высокого уровня исходного описания проекта выступают язык VHDL и язык Verilog.
 Частично ( либо полностью) проект может быть создан в схемотехническом ( графическом) редакторе.
 Логические элементы, в том числе и макроэлементы, параметризуемые по разрядности ( сумматоры, дешифраторы и т. д.), могут быть взяты из системной библиотеки либо созданы проектировщиком, при этом функционирование элементов также должно быть описано.
 Проектные операции на этапах алгоритмического и логического проектирования сосредоточены в двух подсистемах: подсистеме моделирования ( программа ModelSim) и подсистеме синтеза ( синтезаторе).
 Пользователь может выбирать различные синтезаторы в зависимости от языка исходного описания.
 Некоторые сведения о системе моделирования ModelSim можно почерпнуть из работы [ 4 ].
 Система WebPack ISE описана в статьях [ 5, 6 ].
 Предлагается решать поставленную задачу с использованием языка VHDL и синтезатора LeonardoSpectrum.
 Далее будем пользоваться сокращёнными именами: систему WebPack ISE будем именовать Web - Pack, синтезатор LeonardoSpectrum будем называть Leonardo, полузаказную СБИС на основе БМК назовём просто БМК, элементы библиотеки проектирования БМК назовём примитивами.
 Синтезатор Leonardo.
 Синтезатор Leonardo позволяет получать схемы по описаниям на VHDL только для специально выделенного подмножества языка.
 Обычно данное подмножество называется синтезируемым.
 Синтезируемое подмножество VHDL для синтезатора Leonardo и другие аспекты синтеза логических схем по VHDL - описаниям изучены в [ 7 ].
 Ещё одним важным обстоятельством является то, что Leonardo позволяет синтезировать логические схемы не только для ПЛИС, но и для БМК.
 Для этого пользователь должен описать функции примитивов и создать средствами системы Leonardo собственную целевую библиотеку синтеза.
 Библиотеки синтеза кристаллов ПЛИС встроены в Leonardo. Подчеркнём, что в Leonardo имеется специальная программа, позволяющая создать собственную библиотеку синтеза.
 Важно также то, что при создании библиотеки функции комбинационных элементов описываются в явной форме в виде логических уравнений, однако описание поведения элементов памяти ( триггеров) осуществляется косвенным образом, путём внесения определённой информации в системные " заготовки ".
 Синтез в Leonardo осуществляется в два этапа: первый этап - высокоуровневый синтез, второй этап - логический синтез [ 7 ].
 Результатом высокоуровневого синтеза является RTL - описание схемы, т. е. представление схемы в виде двухвходовых логических элементов И, ИЛИ, инверторов и элементов памяти.
 Рассмотрим три подхода к решению поставленной задачи.
 Подходы различаются в зависимости от способа описания проекта, реализованного в FPGA.
 Подход 1.
 Реализация структурного VHDL - описания проекта
 Исходное описание проекта представляет собой логическую схему, выполненную в виде иерархического структурного VHDL - описания, листовыми описаниями которого являются примитивы библиотеки проектирования БМК.
 Основное достоинство данного подхода - простота.
 По существу, он полностью ориентирован только на будущую реализацию на БМК, так как логическое проектирование БМК сводится только к моделированию исходного описания проекта.
 При таком подходе все примитивы библиотеки БМК могут быть описаны на VHDL, поэтому реализация проекта на FPGA скорее всего не вызовет затруднений по ограничениям используемых средств САПР.
 Недостатком такого подхода является " ручной " синтез и соответствующая ему большая трудоёмкость.
 Подход 1 естественен для решения как раз противоположной проблемы, когда имеющуюся схему БМК требуется реализовать на FPGA, т. е. провести макетирование на FPGA будущей схемы БМК.
 При использовании подхода 1 необходимо выполнение требования 1.
 Требование 1.
 Создание VHDL - моделей для примитивов ( комбинационных логических элементов и триггеров) библиотеки БМК.
 Подход 2.
 Реализация функционально-структурного VHDL - описания проекта
 Исходное описание проекта представляет собой иерархическое функционально-структурное VHDL - описание.
 Комбинационная логика задаётся произвольным образом, однако в качестве элементов памяти исходного описания выступают триггеры из библиотеки БМК.
 Достоинство данного подхода - неизменность общей архитектуры схемы, так как перепроектированию подвергаются только блоки комбинационной логики.
 Недостаток - невозможность исходного описания всего проекта на чисто алгоритмическом ( поведенческом) уровне.
 Перепроектирование ( повторный синтез) БМК может вестись в данном случае двумя способами.
 Способ 1 сводится к использованию только синтезатора Leonardo, перепроектирование - к синтезу схемы в Leonardo по исходному VHDL - описанию, при этом элементы памяти не перепроектируются - объявляются при синтезе " чёрными ящиками "( black box).
 Позже это будет показано на примере.
 При подходе 2 необходимо выполнение требований 1, 2.
 Требование 2.
 Создание ( описание) в рамках системы Leonardo собственной целевой библиотеки синтеза, куда должны быть включены описания только комбинационных примитивов из библиотеки БМК.
 Выполнение данного требования достаточно просто, ибо, как уже говорилось ранее, функции элементов целевой библиотеки описываются явным образом в виде логических уравнений.
 Кроме того, могут быть указаны требуемые временные задержки элементов, что сделает более достоверным логическое моделирование повторно синтезированной схемы.
 В подходе 2 комбинационные блоки могут быть описаны " произвольным " образом.
 Поясним это расплывчатое понятие.
 В данном случае речь идёт о том, чтобы синтезатор Leonardo смог по произвольному алгоритмическому описанию построить комбинационную схему только из комбинационных примитивов БМК.
 Например, если алгоритмическое VHDL - описание представлено в стиле data flow [ 7 ], то синтезатор Leonardo легко строит логическую схему.
 Стиль data flow использует операторы назначения сигналов, логические, арифметические операторы, операторы процессов языка VHDL.
 Способ 1 требует опыта работы с синтезатором Leonardo.
 Требуется ясное понимание тех конструкций языка VHDL, которые приводят к появлению элементов памяти в логических схемах.
 Данную информацию во многом можно почерпнуть из [ 7 ].
 Способ 2.
 Использование для перепроектирования двух систем: синтезатора Leonardo и системы " Синтез БМК ".
 Система " Синтез БМК "[ 8 ] предназначена для логического проектирования схем БМК.
 В данном случае синтезатор Leonardo выполняет синтез, схема сохраняется в виде структурного Е DIF - описания.
 Затем возможен ещё один повторный синтез комбинированными алгоритмами в системе " Синтез БМК ".
 Достоинством такого подхода является то, что в некоторых ( примерно 20 %) случаях удаётся получить логические схемы меньшей сложности.
 Заметим, что в системе " Синтез БМК " оптимизации подвергается только комбинационная логика, элементы памяти остаются без изменений.
 Пример.
 Проиллюстрируем подход 2 на примере схемы VLSI _ 1 _ D ( рис. 1).
 Приведённое ниже исходное VHDL - описание схемы VLSI _ 1 _ D является функционально-структурным.
 Элемент ( компонент) DFF - это D - триггер из библиотеки БМК.
 Ниже приводится VHDL - описание триггера DFF.
 Подсхема ( компонент) VLSI _ 1 _ D ( рис. 2) представляет собой комбинационный блок, описанный иерархически на функционально-структурном уровне.
 Комбинационный блок VLSI _ 1 реализует следующий алгоритм [ 7 ].
 На входные полюсы подаются два двухразрядных числа a =( a 2, a 1), b =( b 2, b 1), где a 2, b 2 - старшие разряды чисел a, b соответственно, и x - управляющий сигнал.
 Если x = 1, блок VLSI _ 1 должен перемножить числа a, b и выдать четырехразрядное число d =( d 4, d 3, d 2, d 1)( a 2, al)×(b2,b1)=(d4,d3,d2,d1).
 Если x = 0, то числа a, b должны быть сложены ( a 2, al)+( b 2, bl)=( c 2, s 2, s 1), при этом в разряде d 4 всегда должен быть нуль, в разряде d 3 - перенос c 2, в разряде d 2 - старший разряд суммы s 2, в разряде d 1 - младший разряд суммы s 1.
 Функцию сложения чисел выполняет подсхема adder _ 2, функцию умножения - подсхема mult _ 2, управление подачей выходных сигналов - подсхема YY _ MUX ( выходные мультиплексоры). VHDL - описания данных подсхем приведены в Приложении.
 Схема VLSI _ 1 _ D была реализована FPGA типа Spartan 2 ( Device Family), микросхема xc 2 s 15 ( Device) в САПР WebPack.
 Некоторая информация из отчёта по результатам синтеза структуры FPGA приведена ниже.
 Рассмотрим способ 1.
 Для реализации схемы на БМК использовалась библиотека БМК, описанная в работе [ 6 ].
 Примеры элементов библиотеки приведены в таблице.
 Выполним синтез в WebPack с помощью системы Leonardo и зафиксируем VHDL - описание после этапа высокоуровневого синтеза ( RTL - описание).
 На уровне RTL иерархия описания схемы сохранилась.
 Триггер DFF оказался реализованным с помощью процедуры DFFPC.
 Целевая библиотека синтеза Leonardo ( библиотека проектирования БМК)
 Реализация триггера DFF, полученная Leonardo, приведена ниже.
 Далее приведём текст процедуры DFFPC ( в теле пакета components), сгенерированный системой Leonardo:
 Иерархия описания комбинационного блока сохранилась, однако листовые описания подсхем add 1, add 2 изменились и представляются на уровне двухвходовых логических элементов и инверторов.
 Например, RTL - описание подсхемы addl ( одноразрядного полусумматора) выглядит следующим образом ( сравните его с приведённым в Приложении):
 RTL - описание подсхемы VLSI _ 1 будет исходным для синтеза схемы из примитивов БМК.
 В результате синтеза в целевой библиотеке БМК RTL - описания подсхемы VLSI _ 1 было получено структурное описание логической схемы из примитивов БМК.
 Выдержка из отчёта синтеза приведена ниже:
 Синтезированная подсхема ( структурное описание) была сохранена в Leonardo на языке VHDL.
 Общее структурное описание проекта было затем промоделировано в ModelSim на тех же тестах, что и исходный проект.
 Моделирование показало функциональную эквивалентность исходного описания и синтезированной схемы.
 Моделирование проводилось для примитивов с нулевыми задержками.
 Однако в действительности примитивы БМК имеют вполне определённые ( ненулевые) задержки, поэтому основной проблемой при автоматизированном перепроектировании FPGA в БМК является проблема не функциональной эквивалентности, а согласования временных задержек.
 Схема FPGA может иметь одну задержку, схема БМК, полученная в результате перепроектирования,- другую.
 Примечание.
 Если не включать в проект функциональное описание элемента DFF, то при синтезе элемент DFF будет объявлен " чёрным ящиком ".
 Рассмотрим способ 2.
 После сохранения синтезированной Leonardo схемы VLSI _ 1 _ D в формате EDIF был проведён синтез в системе " Синтез БМК ".
 Однако на данном примере с помощью программ системы " Синтез БМК " улучшить результат синтеза ( в сравнении с Leonardo) не удалось.
 Подход 3.
 Реализация алгоритмического VHDL - описания проекта
 Исходное описание проекта является алгоритмическим VHDL - описанием.
 Иначе говоря, это общий случай, когда исходное описание проекта представлено на синтезируемом подмножестве языка VHDL.
 Тогда в библиотеку синтеза Leonardo требуется внести триггеры и комбинационные элементы библиотеки БМК.
 Требование 3.
 Точное согласование VHDL - моделей триггеров, настраиваемых в библиотеке синтеза Leonardo, и триггеров из библиотеки БМК.
 Выполнить данное требование трудно, так как пользователю недоступны VHDL - модели триггеров, формируемых по " заготовкам " системы Leonardo.
 Если же в целевую библиотеку Leonardo не вносить элементы памяти, то проект будет реализован на комбинационных элементах и тех элементах памяти, которые создаст Leonardo.
 Примером тому является процедура DFFPC.
 Теперь проектировщику придётся провести отдельно реализацию процедур типа DFFPC структурными моделями с использованием собственных моделей триггеров БМК.
 Это требуется как для получения логической схемы, так и для того, чтобы иметь возможность провести моделирование на языке VHDL синтезированной схемы БМК.
 Частично продемонстрируем подход 3 на примере той схемы VLSI _ 1 _ D, в которой комбинационный блок VLSI _ 1 описан на алгоритмическом уровне.
 Подсхему, реализующую функции блока VLSI _ 1 на алгоритмическом уровне, назовём VLSI _ 1 _ F.
 Алгоритмическое описание для комбинационного блока VLSI _ 1 _ F имеет следующий вид:
 Заметим, что порты в подсхеме VLSI _ 1 _ F описаны другими типами данных.
 В алгоритмическом описании используются функции to _ integer, to _ unsigned пакета numeric _ std для перевода типов данных.
 VHDL - описание схемы VLSI _ 1 _ D с использованием подсхемы VLSI _ 1 _ F имеет вид;
 Чтобы провести синтез без перепроектирования элементов DFF, требуется пакет exemplar _ 1164.
 Использование данного пакета задаётся строками
 Триггеры DFF объявляются чёрными ящиками с помощью атрибута noopt синтеза;
 В данном примере синтезатор Leonardo построил схему на элементах библиотеки и компонентах DFF.
 Выдержка из отчёта синтеза приводится ниже.
 Видно, что в отчёте триггер DFF объявлен чёрным ящиком ( Black Box).
 Моделирование полученной схемы и сравнение её со схемой, полученной по подходу 2, показало функциональную эквивалентность синтезированных схем БМК.
 В статье сформулированы основные требования, выполнение которых необходимо для осуществления предложенных подходов к перепроектированию FPGA в БМК.
 Предложенные подходы опираются на современные средства САПР, оперирующие описаниями проектов на языке высокого уровня VHDL.
 Установлено, что основными проблемами являются согласование VHDL - моделей элементов памяти и согласование временных задержек FPGA и БМК.
 Приложение
 VHDL - описания подсхем mult _ 2, adder _ 2, YY _ MUX
 Рис. 1.
 Схема VSLI _ 1 D
 Рис. 2.
 Подсхема VLSI _ 1
